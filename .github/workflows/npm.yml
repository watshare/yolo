name: Download Node.js Dependencies

on:
  workflow_dispatch:
    inputs:
      node_version:
        description: 'Node.js 版本'
        required: true
        default: '18.x'
      npm_version:
        description: 'npm 版本'
        required: true
        default: '9.x'
      packages:
        description: '要安装的 npm 包（多个包用逗号分隔）'
        required: true
        default: 'express,lodash'

jobs:
  download-dependencies:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ github.event.inputs.node_version }}
          cache: 'npm'
      
      - name: Install specified npm version
        run: |
          npm install -g npm@${{ github.event.inputs.npm_version }}
          npm --version
      
      - name: Create package.json
        run: |
          npm init -y
      
      - name: Install specified packages
        run: |
          npm install ${{ github.event.inputs.packages }} --package-lock-only
      
      - name: Upload package-lock.json
        uses: actions/upload-artifact@v4
        with:
          name: package-lock
          path: package-lock.json
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Download dependencies using Python
        run: |
          mkdir -p downloaded_packages
          python - <<EOF
          import json
          import os
          import requests
          from urllib.parse import urlparse
          
          # 读取 package-lock.json
          with open('package-lock.json', 'r') as f:
              lock_data = json.load(f)
          
          # 创建下载目录
          os.makedirs('downloaded_packages', exist_ok=True)
          
          # 下载所有依赖包
          downloaded_files = []
          
          # 处理顶级依赖
          for package_name, info in lock_data.get('packages', {}).items():
              if not package_name:  # 跳过根包
                  continue
              
              if 'resolved' in info:
                  url = info['resolved']
                  filename = os.path.basename(urlparse(url).path)
                  
                  try:
                      print(f"Downloading {url}")
                      response = requests.get(url, stream=True)
                      response.raise_for_status()
                      
                      file_path = os.path.join('downloaded_packages', filename)
                      with open(file_path, 'wb') as f:
                          for chunk in response.iter_content(chunk_size=8192):
                              f.write(chunk)
                      
                      downloaded_files.append(file_path)
                      print(f"Downloaded {filename}")
                  except Exception as e:
                      print(f"Error downloading {url}: {e}")
          
          # 处理依赖树中的依赖
          for package_name, info in lock_data.get('dependencies', {}).items():
              if 'resolved' in info:
                  url = info['resolved']
                  filename = os.path.basename(urlparse(url).path)
                  
                  try:
                      print(f"Downloading {url}")
                      response = requests.get(url, stream=True)
                      response.raise_for_status()
                      
                      file_path = os.path.join('downloaded_packages', filename)
                      with open(file_path, 'wb') as f:
                          for chunk in response.iter_content(chunk_size=8192):
                              f.write(chunk)
                      
                      downloaded_files.append(file_path)
                      print(f"Downloaded {filename}")
                  except Exception as e:
                      print(f"Error downloading {url}: {e}")
          
          print(f"Downloaded {len(downloaded_files)} packages")
          EOF
      
      - name: Compress downloaded packages
        run: |
          tar -czvf node_modules_packages.tar.gz downloaded_packages
      
      - name: Upload compressed packages
        uses: actions/upload-artifact@v4
        with:
          name: node_modules_packages
          path: node_modules_packages.tar.gz    
