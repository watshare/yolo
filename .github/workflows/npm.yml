name: NPM Dependency Downloader

on:
  workflow_dispatch:
    inputs:
      node_version:
        description: 'Node.js版本'
        required: true
        default: '18.x'
      npm_version:
        description: 'npm版本'
        required: true
        default: '9.x'
      package_specs:
        description: '要下载的插件和版本，格式为"插件名@版本号"，多个插件使用逗号分隔（例如：react@18.2.0,express@4.18.2,lodash）'
        required: true

jobs:
  download-dependencies:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4
      
      - name: 设置Node.js环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ github.event.inputs.node_version }}
          # 移除cache参数，避免自动缓存查找
      
      - name: 安装指定版本的npm
        run: npm install -g npm@${{ github.event.inputs.npm_version }}
      
      - name: 创建临时目录
        run: mkdir -p ./npm-packages && mkdir -p ./package-tarballs
      
      - name: 初始化空项目
        working-directory: ./npm-packages
        run: |
          npm init -y
          # 移除无效的配置项
      
      - name: 安装主插件并保存依赖树
        working-directory: ./npm-packages
        run: |
          # 将输入的包规范分割成数组
          IFS=',' read -ra PACKAGE_SPECS <<< "${{ github.event.inputs.package_specs }}"
          
          # 构建安装命令
          INSTALL_CMD="npm install"
          for spec in "${PACKAGE_SPECS[@]}"; do
            # 移除前后空格
            spec=$(echo "$spec" | xargs)
            # 检查是否包含@符号
            if [[ "$spec" == *@* ]]; then
              # 包含@符号，直接使用
              INSTALL_CMD+=" $spec"
            else
              # 不包含@符号，添加最新版本标识
              INSTALL_CMD+=" $spec@latest"
            fi
          done
          
          # 添加安装选项并执行
          $INSTALL_CMD --package-lock-only --no-save
          
          # 验证package-lock.json是否存在
          if [ ! -f "package-lock.json" ]; then
            echo "错误: package-lock.json未生成!"
            exit 1
          fi
          
          cat package-lock.json
      
      - name: 下载所有依赖的原始包
        working-directory: ./npm-packages
        run: |
          # 检查license-checker是否安装
          if ! command -v license-checker &> /dev/null
          then
            echo "安装license-checker工具..."
            npm install -g license-checker
          fi
          
          # 下载所有依赖包
          npm pack $(npx -y license-checker --json --onlyDependencies --production | jq -r 'to_entries[] | "\(.key)@\(.value.version)"') --pack-destination ../package-tarballs
          
          # 验证是否下载了包
          if [ -z "$(ls -A ../package-tarballs)" ]; then
            echo "错误: 没有下载任何包!"
            exit 1
          fi
      
      - name: 创建打包文件
        run: |
          tar -czvf npm-packages.tar.gz ./package-tarballs
          echo "ARCHIVE_FILE=npm-packages.tar.gz" >> $GITHUB_ENV
      
      - name: 上传打包文件作为工件
        uses: actions/upload-artifact@v4
        with:
          name: npm-packages
          path: ${{ env.ARCHIVE_FILE }}
          retention-days: 7    
