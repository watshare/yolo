name: Node Plugin Downloader

on:
  workflow_dispatch:
    inputs:
      node_version:
        description: "Node.js version (e.g., 18.x)"
        required: true
        default: "18.x"
      npm_version:
        description: "NPM version (e.g., 9.x)"
        required: true
        default: "9.x"
      plugins:
        description: "Comma-separated list of plugin names (e.g., express,webpack)"
        required: true

jobs:
  download-plugins:
    runs-on: ubuntu-latest
    steps:
      # 设置 Node.js 环境
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          registry-url: https://registry.npmjs.org/

      # 安装 NPM
      - name: Install NPM
        run: npm install -g npm@${{ inputs.npm_version }}

      # 创建 package.json
      - name: Create package.json
        run: |
          echo '{ "name": "temp-project", "version": "1.0.0", "dependencies": {$(echo "${{ inputs.plugins }}" | sed -e 's/$[^,]*$/"\1": "*", /g' | sed -e 's/,$//') } }' > package.json

      # 安装依赖并生成 package-lock.json
      - name: Install dependencies
        run: npm install --force

      # 设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # 安装 Python 依赖
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      # 将 Python 脚本写入文件并运行（避免 heredoc 语法问题）
      - name: Download packages
        run: |
          cat <<'EOF' > download_packages.py
import json
import os
import requests
import zipfile

# 解析 package-lock.json
with open('package-lock.json', 'r') as f:
    data = json.load(f)

# 提取所有依赖的 URL
urls = set()

def extract_urls(node):
    if 'resolved' in node:
        urls.add(node['resolved'])
    for child in node.get('dependencies', {}):
        extract_urls(node['dependencies'][child])

extract_urls(data)

# 创建下载目录
os.makedirs('downloaded_packages', exist_ok=True)

# 下载所有包
for url in urls:
    try:
        filename = os.path.join('downloaded_packages', os.path.basename(url))
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        with open(filename, 'wb') as f:
            f.write(response.content)
    except Exception as e:
        print(f"Failed to download {url}: {str(e)}")

# 打包成 zip
with zipfile.ZipFile('plugins.zip', 'w') as zipf:
    for root, _, files in os.walk('downloaded_packages'):
        for file in files:
            zipf.write(os.path.join(root, file), file)

print("Downloaded and packed all packages.")
EOF

          python download_packages.py

      # 上传打包文件
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: plugin-packages
          path: plugins.zip
