name: Node.js Package Downloader and Bundler

on:
  workflow_dispatch:
    inputs:
      node_version:
        description: 'Node.js version (e.g., 18.x)'
        required: true
        default: '18.x'
      npm_version:
        description: 'NPM version (e.g., 9.0.0)'
        required: true
        default: '9.0.0'
      plugins:
        description: 'Comma separated list of plugin names (e.g., express,lodash)'
        required: true
        default: 'express'

jobs:
  setup-and-download:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ github.event.inputs.node_version }}

      - name: Upgrade NPM
        run: |
          npm install -g npm@${{ github.event.inputs.npm_version }}
      
      - name: Create New Project Directory
        run: |
          mkdir node-project
          cd node-project
          npm init -y

      - name: Install Plugins
        run: |
          cd node-project
          npm install ${{ github.event.inputs.plugins }}
      
      - name: Check if package-lock.json exists
        id: check_lock
        run: |
          if [ -f node-project/package-lock.json ]; then
            echo "lock_file_exists=true" >> $GITHUB_OUTPUT
          else
            echo "lock_file_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Read package-lock.json and Extract Download URLs
        if: steps.check_lock.outputs.lock_file_exists == 'true'
        run: |
          python3 <<EOF
import json
import os

lock_path = "node-project/package-lock.json"
urls_set = set()

with open(lock_path, "r", encoding="utf-8") as f:
    data = json.load(f)

def extract_urls(obj):
    if isinstance(obj, dict):
        for k, v in obj.items():
            if k == "resolved" and isinstance(v, str) and v.startswith("http"):
                urls_set.add(v)
            else:
                extract_urls(v)
    elif isinstance(obj, list):
        for i in obj:
            extract_urls(i)

extract_urls(data)

with open("download_urls.txt", "w") as f:
    for url in urls_set:
        f.write(url + "\n")

print(f"Extracted {len(urls_set)} URLs to download_urls.txt")
EOF

      - name: Download All Packages
        if: steps.check_lock.outputs.lock_file_exists == 'true'
        run: |
          mkdir -p downloaded_packages
          while read url; do
            fname=$(basename "$url")
            wget -q "$url" -O "downloaded_packages/$fname"
          done < download_urls.txt

      - name: Compress Downloaded Packages
        if: steps.check_lock.outputs.lock_file_exists == 'true'
        run: |
          zip -r node_packages.zip downloaded_packages

      - name: Upload Package Zip as Artifact
        if: steps.check_lock.outputs.lock_file_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: node_packages
          path: node_packages.zip

      - name: Output Result
        run: |
          if [ "${{ steps.check_lock.outputs.lock_file_exists }}" == "true" ]; then
            echo "package-lock.json found, all dependencies downloaded and bundled."
          else
            echo "package-lock.json not found, nothing to bundle."
