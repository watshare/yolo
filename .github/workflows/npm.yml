name: Node.js Dependency Downloader

on:
  workflow_dispatch:
    inputs:
      node_version:
        description: 'Node.js 版本'
        required: true
        default: '18.x'
      npm_version:
        description: 'npm 版本'
        required: true
        default: '9.x'
      plugins:
        description: '要安装的插件列表（用逗号分隔）'
        required: true
        default: 'express,react,react-dom'

jobs:
  download-dependencies:
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ github.event.inputs.node_version }}
          cache: 'npm'

      - name: 安装指定版本的 npm
        run: npm install -g npm@${{ github.event.inputs.npm_version }}

      - name: 安装插件
        run: |
          IFS=',' read -ra PLUGINS <<< "${{ github.event.inputs.plugins }}"
          for plugin in "${PLUGINS[@]}"; do
            npm install --save-dev $plugin
          done

      - name: 创建新项目
        run: |
          mkdir my-project
          cd my-project
          npm init -y

      - name: 检查 package-lock.json 文件
        id: check_file
        run: |
          if [ -f "my-project/package-lock.json" ]; then
            echo "package_lock_exists=true" >> $GITHUB_ENV
            echo "找到 package-lock.json 文件"
          else
            echo "package_lock_exists=false" >> $GITHUB_ENV
            echo "未找到 package-lock.json 文件"
          fi

      - name: 读取 package-lock.json 并下载依赖
        if: env.package_lock_exists == 'true'
        run: |
          # 安装 Python 依赖
          pip install requests

          # 创建下载目录
          mkdir -p downloads

          # 使用 Python 脚本解析 package-lock.json 并下载依赖
          python << EOF
          import json
          import os
          import requests
          from urllib.parse import urlparse

          # 读取 package-lock.json
          with open('my-project/package-lock.json', 'r') as f:
              lock_data = json.load(f)

          # 存储所有下载链接
          download_links = []

          # 提取 dependencies 中的下载链接
          if 'dependencies' in lock_data:
              for dep_name, dep_info in lock_data['dependencies'].items():
                  if 'resolved' in dep_info:
                      resolved_url = dep_info['resolved']
                      # 检查是否为 HTTP/HTTPS 链接
                      if resolved_url.startswith('http'):
                          download_links.append(resolved_url)

          # 提取 packages 中的下载链接 (npm v5+)
          if 'packages' in lock_data:
              for package_path, package_info in lock_data['packages'].items():
                  if 'resolved' in package_info:
                      resolved_url = package_info['resolved']
                      # 检查是否为 HTTP/HTTPS 链接
                      if resolved_url.startswith('http'):
                          download_links.append(resolved_url)

          # 下载所有链接的包
          for url in download_links:
              try:
                  # 解析 URL 获取文件名
                  parsed_url = urlparse(url)
                  filename = os.path.basename(parsed_url.path)
                  if not filename:
                      filename = f"package_{hash(url)}.tar.gz"
                  
                  # 下载文件
                  print(f"下载: {url}")
                  response = requests.get(url, stream=True)
                  response.raise_for_status()
                  
                  # 保存文件
                  with open(f"downloads/{filename}", 'wb') as f:
                      for chunk in response.iter_content(chunk_size=8192):
                          f.write(chunk)
                  
                  print(f"已下载: {filename}")
              except Exception as e:
                  print(f"下载失败: {url}, 错误: {str(e)}")

          # 创建下载链接列表文件
          with open('downloads/links.txt', 'w') as f:
              for url in download_links:
                  f.write(url + '\n')
          EOF

      - name: 打包下载的依赖文件
        if: env.package_lock_exists == 'true'
        run: |
          cd downloads
          tar -czvf dependencies.tar.gz *
          cd ..
          mv downloads/dependencies.tar.gz .

      - name: 上传打包文件作为 artifact
        if: env.package_lock_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: dependencies
          path: dependencies.tar.gz    
